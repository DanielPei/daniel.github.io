<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spark dataframe basic</title>
    <url>/2020/04/11/spark/dataframe-basic/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇主要记录 <strong>pyspark</strong> 操作 <strong>dataframe</strong> 的常见基本操作，以 <strong>hive</strong> 作为数据源进行示例。</p>
<a id="more"></a>

<h1 id="Hive-数据源相关信息"><a href="#Hive-数据源相关信息" class="headerlink" title="Hive 数据源相关信息"></a>Hive 数据源相关信息</h1><p>cd 查看 hive 数据源信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 hive 数据库</span></span><br><span class="line">spark.sql(<span class="string">"show databases;"</span>).show()</span><br></pre></td></tr></table></figure>

<h1 id="Dataframe-常用操作"><a href="#Dataframe-常用操作" class="headerlink" title="Dataframe 常用操作"></a>Dataframe 常用操作</h1><h2 id="Dataframe-自定义-UDF-函数"><a href="#Dataframe-自定义-UDF-函数" class="headerlink" title="Dataframe 自定义 UDF 函数"></a>Dataframe 自定义 UDF 函数</h2><p>通过 <strong>udf</strong> （ User defined function ） 可以将自定义的业务逻辑函数作用于 <em>dataframe</em>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入依赖</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> udf</span><br><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StringType, BooleanType, IntegerType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试数据</span></span><br><span class="line">data = [(<span class="number">1</span>, <span class="number">1.0</span>, <span class="literal">None</span>), (<span class="number">1</span>, <span class="number">2.0</span>,<span class="number">5</span>), (<span class="number">2</span>, <span class="number">3.0</span>,<span class="number">5</span>), (<span class="number">2</span>, <span class="number">5.0</span>,<span class="number">5</span>), (<span class="number">2</span>, <span class="number">10.0</span>,<span class="number">5</span>)]</span><br><span class="line">cols = (<span class="string">"id"</span>, <span class="string">"v"</span>, <span class="string">"f"</span>)</span><br><span class="line">df = spark.createDataFrame(data, cols)</span><br><span class="line"></span><br><span class="line">    +---+----+----+</span><br><span class="line">    | id|   v|   f|</span><br><span class="line">    +---+----+----+</span><br><span class="line">    |  <span class="number">1</span>| <span class="number">1.0</span>|null|</span><br><span class="line">    |  <span class="number">1</span>| <span class="number">2.0</span>|   <span class="number">5</span>|</span><br><span class="line">    |  <span class="number">2</span>| <span class="number">3.0</span>|   <span class="number">5</span>|</span><br><span class="line">    |  <span class="number">2</span>| <span class="number">5.0</span>|   <span class="number">5</span>|</span><br><span class="line">    |  <span class="number">2</span>|<span class="number">10.0</span>|   <span class="number">5</span>|</span><br><span class="line">    +---+----+----+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 定义业务逻辑函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_even</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> (val%<span class="number">2</span>) == <span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 封装 udf</span></span><br><span class="line">udf_is_even = udf(is_even, returnType= BooleanType())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 使用 udf ：新增一个 Boolean 类型的列 is_v_even 表示 v 列是否是偶数。</span></span><br><span class="line">df.withColumn(<span class="string">"is_v_even"</span>, udf_is_even(df[<span class="string">"v"</span>])).show()</span><br><span class="line"></span><br><span class="line">	+---+----+----+---------+</span><br><span class="line">	| id|   v|   f|is_v_even|</span><br><span class="line">	+---+----+----+---------+</span><br><span class="line">	|  <span class="number">1</span>| <span class="number">1.0</span>|null|    false|</span><br><span class="line">	|  <span class="number">1</span>| <span class="number">2.0</span>|   <span class="number">5</span>|     true|</span><br><span class="line">	|  <span class="number">2</span>| <span class="number">3.0</span>|   <span class="number">5</span>|    false|</span><br><span class="line">	|  <span class="number">2</span>| <span class="number">5.0</span>|   <span class="number">5</span>|    false|</span><br><span class="line">	|  <span class="number">2</span>|<span class="number">10.0</span>|   <span class="number">5</span>|     true|</span><br><span class="line">	+---+----+----+---------+</span><br></pre></td></tr></table></figure>

<h2 id="Dataframe-column-操作"><a href="#Dataframe-column-操作" class="headerlink" title="Dataframe column 操作"></a>Dataframe column 操作</h2><h3 id="重命名列-withColumnRenamed"><a href="#重命名列-withColumnRenamed" class="headerlink" title="重命名列 withColumnRenamed"></a>重命名列 withColumnRenamed</h3><blockquote>
<p><strong>withColumnRenamed(existing, new)</strong> : Returns a new DataFrame by renaming an existing column. This is a no-op if schema doesn’t contain the given column name.<br>    <strong>Parameters:</strong><br>    - existing – string, name of the existing column to rename.<br>    - new – string, new name of the column.</p>
</blockquote>
<pre><code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 v 列重命名为 val </span></span><br><span class="line">df = df.withColumnRenamed(<span class="string">"v"</span>, <span class="string">"val"</span>)</span><br></pre></td></tr></table></figure></code></pre><h3 id="新增列-withColumn"><a href="#新增列-withColumn" class="headerlink" title="新增列 withColumn"></a>新增列 withColumn</h3><blockquote>
<p><strong>withColumn(colName, col)</strong> : Returns a new DataFrame by adding a column or replacing the existing column that has the same name.<br>The column expression must be an expression over this DataFrame; attempting to add a column from some other dataframe will raise an error.<br>    <strong>Parameters:</strong><br>    - colName – string, name of the new column.<br>    - col – a Column expression for the new column.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.show()</span><br><span class="line"></span><br><span class="line">	+---+----+----+</span><br><span class="line">	| id|   v|   f|</span><br><span class="line">	+---+----+----+</span><br><span class="line">	|  <span class="number">1</span>| <span class="number">1.0</span>|null|    </span><br><span class="line">	|  <span class="number">2</span>|<span class="number">10.0</span>|   <span class="number">5</span>|</span><br><span class="line">	+---+----+----+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 udf ：新增一个 Boolean 类型的列 is_v_even 表示 v 列是否是偶数。</span></span><br><span class="line">df.withColumn(<span class="string">"is_v_even"</span>, udf_is_even(df[<span class="string">"v"</span>])).show()</span><br><span class="line"></span><br><span class="line">	+---+----+----+---------+</span><br><span class="line">	| id|   v|   f|is_v_even|</span><br><span class="line">	+---+----+----+---------+</span><br><span class="line">	|  <span class="number">1</span>| <span class="number">1.0</span>|null|    false|</span><br><span class="line">	|  <span class="number">2</span>|<span class="number">10.0</span>|   <span class="number">5</span>|     true|</span><br><span class="line">	+---+----+----+---------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一列，并填充固定值</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> lit</span><br><span class="line"></span><br><span class="line">df.withColumn(<span class="string">"constants"</span>, lit(<span class="string">"Hello"</span>)).show()</span><br><span class="line"></span><br><span class="line">	+---+----+----+---------+</span><br><span class="line">	| id|   v|   f|constants|</span><br><span class="line">	+---+----+----+---------+</span><br><span class="line">	|  <span class="number">1</span>| <span class="number">1.0</span>|null|    Hello|</span><br><span class="line">	|  <span class="number">2</span>|<span class="number">10.0</span>|   <span class="number">5</span>|    Hello|</span><br><span class="line">	+---+----+----+---------+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一列，并用其他几列的数据联合填充</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> concat_ws</span><br><span class="line"></span><br><span class="line">df.withColumn(<span class="string">"v+f"</span>, df[<span class="string">"v"</span>] + df[<span class="string">"f"</span>]).show()</span><br><span class="line"></span><br><span class="line">	+---+----+----+----+</span><br><span class="line">	| id|   v|   f| v+f|</span><br><span class="line">	+---+----+----+----+</span><br><span class="line">	|  <span class="number">1</span>| <span class="number">1.0</span>|null|null|	<span class="comment"># null 与 数值的加法，结果为 null</span></span><br><span class="line">	|  <span class="number">2</span>|<span class="number">10.0</span>|   <span class="number">5</span>|<span class="number">15.0</span>|</span><br><span class="line">	+---+----+----+----+</span><br><span class="line"></span><br><span class="line">df.withColumn(<span class="string">"Concat_v_f"</span>, concat_ws(<span class="string">"-"</span>, *[<span class="string">"v"</span>,<span class="string">"f"</span>, <span class="string">"id"</span>])).show()</span><br><span class="line"></span><br><span class="line">	+---+----+----+----------+</span><br><span class="line">	| id|   v|   f|Concat_v_f|</span><br><span class="line">	+---+----+----+----------+</span><br><span class="line">	|  <span class="number">1</span>| <span class="number">1.0</span>|null|     <span class="number">1.0</span><span class="number">-1</span>|	<span class="comment"># null 值会忽略</span></span><br><span class="line">	|  <span class="number">2</span>|<span class="number">10.0</span>|   <span class="number">5</span>|  <span class="number">10.0</span><span class="number">-5</span><span class="number">-2</span>|</span><br><span class="line">	+---+----+----+----------+</span><br></pre></td></tr></table></figure>

<h3 id="替换列"><a href="#替换列" class="headerlink" title="替换列"></a>替换列</h3><p>新增列时，如果使用的列名是已存在的列，则会替换该列。</p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p><strong>1. 两个 df union 后出现数据错乱。</strong><br>DataFrame 的 union 操作，只会按照 cols 的顺序进行两个 DataFrame 的合并，忽略 DataFrame 的列名，如果两个 DataFrame 的每个列的顺序不是完全一致的，则会出现数据的错乱。<br>如希望按列匹配合并，应使用 <strong>unionByName</strong> ( pyspark 2.3 引入)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df_1 = spark.createDataFrame([(<span class="string">"Dan"</span>, <span class="number">28</span>)],(<span class="string">"name"</span>, <span class="string">"age"</span>))</span><br><span class="line">df_2 = spark.createDataFrame([(<span class="number">18</span>, <span class="string">"John"</span>)],(<span class="string">"age"</span>, <span class="string">"name"</span>))</span><br><span class="line"></span><br><span class="line">df_1.union(df_2).show()</span><br><span class="line"></span><br><span class="line">	+----+----+</span><br><span class="line">	|name| age|</span><br><span class="line">	+----+----+</span><br><span class="line">	| Dan|  <span class="number">28</span>|</span><br><span class="line">	|  <span class="number">18</span>|John|</span><br><span class="line">	+----+----+</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
      <categories>
        <category>spark</category>
        <category>dataframe</category>
      </categories>
  </entry>
  <entry>
    <title>Local search for hexo</title>
    <url>/2019/11/14/Local-search-for-hexo/</url>
    <content><![CDATA[<p>Enable local search for hexo blog with <strong>next</strong> theme.</p>
<h1 id="Install-Local-Search-plugin"><a href="#Install-Local-Search-plugin" class="headerlink" title="Install Local Search plugin."></a>Install <strong>Local Search</strong> plugin.</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<a id="more"></a>


<h1 id="Edit-site-config-config-yml"><a href="#Edit-site-config-config-yml" class="headerlink" title="Edit site config : _config.yml"></a>Edit site config : <strong>_config.yml</strong></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add these config to any position.</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>

<h1 id="Edit-theme-config-themes-next-config-yml"><a href="#Edit-theme-config-themes-next-config-yml" class="headerlink" title="Edit theme config : themes/next/_config.yml"></a>Edit theme config : <strong>themes/next/_config.yml</strong></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="Restart-your-blog"><a href="#Restart-your-blog" class="headerlink" title="Restart your blog."></a>Restart your blog.</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-environment-management: pyenv + virtualenv + virtaulenvwrapper</title>
    <url>/2019/11/07/pyenv-and-virtualenv-for-python/</url>
    <content><![CDATA[<p><strong>pyenv</strong> 与 <strong>virtualenv</strong> 是两个目的不同的 python 环境管理工具。</p>
<p><strong>pyenv</strong> ： <strong>版本切换</strong>。用于在多个不同的python版本之间进行切换并互不影响。</p>
<ul>
<li>需要临时<strong>引用／安装</strong>当前python版本不支持的模块／库；</li>
<li>测试／验证不同python版本间兼容性；</li>
</ul>
<p><strong>virtualenv</strong> : <strong>site-packages隔离</strong>。为某个项目或目录创建一个独立的 python 环境，该环境不受当前系统已经安装的 python 包影响。同时，在该环境中安装 python 包也不会影响其他项目。</p>
<ul>
<li>需要使用某一个工具／模块／类库的不同版本；</li>
</ul>
<p><strong>virtaulenvwrapper</strong> 则是对 <strong>virtualenv</strong> 创建的虚拟环境进行管理的工具。</p>
<ul>
<li>快速激活／去激活某个 virtualenv 创建的虚拟环境；</li>
</ul>
<a id="more"></a>


<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install pyenv</span><br><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the below line into ~/.bash_profile or ~/.zshrc, to auto-active pyenv</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">which</span> pyenv &gt; /dev/null; <span class="keyword">then</span> <span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span>; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a root path for virtualenvs we will created by virtualenv and virtualenvwrapper.</span></span><br><span class="line">mkdir ~/.virtualenvs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set default path for virutalenvs in .zshrc or .bashrc.</span></span><br><span class="line"><span class="built_in">export</span> WORKON_HOME=~/.virtualenvs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable virutalenvwrapper in .zshrc or .bashrc.</span></span><br><span class="line"><span class="comment">## As I am using python 3.7 created by pyenv, my virtualenvwrapper.sh script is located in */Users/daniel/.pyenv/versions/3.7.0/bin/virtualenvwrapper.sh*.</span></span><br><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable virutalwrapper right now!</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h1 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h1><p><strong>场景</strong>：Mac 自带的 python 版本为 2.7，遇到一个项目 <em>py3_project</em> 使用 python 3.X 的一些新特性，这时就需要用到 pyenv 将 python 版本临时切换到 3.X (随时可以一条命令再切换回来）。</p>
<p>pyenv 常用命令及场景：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前系统 python 版本：</span></span><br><span class="line">python --version</span><br><span class="line"><span class="comment"># Python 2.7.10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地 pyenv 当前有哪些版本。可以看到当前直邮系统默认的 python 版本。</span></span><br><span class="line">pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /Users/daniel/.pyenv/version)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 python 3.7.0 </span></span><br><span class="line">pyenv install 3.7.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前已安装版本。 system 前的 * 表示当前正在使用的 python 版本</span></span><br><span class="line">pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /Users/daniel/.pyenv/version)</span><br><span class="line">  3.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到 3.7.0 版本</span></span><br><span class="line">mkdir py3_project</span><br><span class="line"><span class="built_in">cd</span> py3_project</span><br><span class="line">pyenv <span class="built_in">local</span> 3.7.0	<span class="comment"># 只切换本目录。 如果希望全局切换，使用 pyenv global 3.7.0</span></span><br><span class="line"></span><br><span class="line">pyenv versions 		<span class="comment"># 本目录切换为 3.7.0 </span></span><br><span class="line">  system</span><br><span class="line">* 3.7.0 (<span class="built_in">set</span> by PYENV_VERSION environment variable)</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">pyenv versions		<span class="comment"># 其他目录未受影响，仍未系统python版本</span></span><br><span class="line">* system (<span class="built_in">set</span> by /Users/daniel/.pyenv/version)</span><br><span class="line">  3.7.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复项目或目录python版本（一般用不到）</span></span><br><span class="line"><span class="built_in">cd</span> py3_project</span><br><span class="line">pyenv <span class="built_in">local</span> system</span><br><span class="line"></span><br><span class="line">pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /Users/daniel/pyenv_demo/.python-version)</span><br><span class="line">  3.7.0</span><br></pre></td></tr></table></figure>

<p>pyenv 帮助:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv</span><br><span class="line">pyenv 1.2.10</span><br><span class="line">Usage: pyenv &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful pyenv commands are:</span><br><span class="line">   commands    List all available pyenv commands</span><br><span class="line">   <span class="built_in">local</span>       Set or show the <span class="built_in">local</span> application-specific Python version</span><br><span class="line">   global      Set or show the global Python version</span><br><span class="line">   shell       Set or show the shell-specific Python version</span><br><span class="line">   install     Install a Python version using python-build</span><br><span class="line">   uninstall   Uninstall a specific Python version</span><br><span class="line">   <span class="built_in">rehash</span>      Rehash pyenv shims (run this after installing executables)</span><br><span class="line">   version     Show the current Python version and its origin</span><br><span class="line">   versions    List all Python versions available to pyenv</span><br><span class="line">   <span class="built_in">which</span>       Display the full path to an executable</span><br><span class="line">   <span class="built_in">whence</span>      List all Python versions that contain the given executable</span><br></pre></td></tr></table></figure>

<h1 id="virtualenv-virtualenvwrapper"><a href="#virtualenv-virtualenvwrapper" class="headerlink" title="virtualenv  + virtualenvwrapper"></a>virtualenv  + virtualenvwrapper</h1><p><strong>场景</strong>：同时有两个项目 A 和 B，都需要使用 request 包，但由于外部依赖或兼容老系统等原因，A 和 B 需要使用的 request 包的版本有差异。此时，可以创建两个不同的虚拟环境，在各自的环境下分别安装对应版本的 request 包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create a virtualenv named py3dev.</span></span><br><span class="line">mkvirtualenv py3dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a virtualenv named py3dev ignore the system site packages.</span></span><br><span class="line">mkvirtualenv --no-site-packages py3dev </span><br><span class="line"></span><br><span class="line"><span class="comment"># List virutalenvs.</span></span><br><span class="line">lsvirtualenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># Work on a *py3dev* virutalenv.</span></span><br><span class="line">workon py3dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exit a virtualenv</span></span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove a virutalenv</span></span><br><span class="line">rmvirtualenv py3dev</span><br></pre></td></tr></table></figure>

<h1 id="Task-：-分别创建-python-2-X-和-python-3-X-的虚拟环境"><a href="#Task-：-分别创建-python-2-X-和-python-3-X-的虚拟环境" class="headerlink" title="Task ： 分别创建 python 2.X 和 python 3.X 的虚拟环境"></a>Task ： 分别创建 python 2.X 和 python 3.X 的虚拟环境</h1><p>python 2.X 虚拟环境创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#确保切换成功，我建议 source .zshrc 一下在切换</span></span><br><span class="line"><span class="comment">#安装全新的Python2.7.10版本</span></span><br><span class="line">pyenv install 2.7.10</span><br><span class="line">pyenv <span class="built_in">rehash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到刚安装的这个版本</span></span><br><span class="line">pyenv <span class="built_in">local</span> 2.7.10</span><br><span class="line"><span class="comment">#确保切换成功</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br><span class="line"><span class="comment">#验证一下版本,pip发现里面包很少</span></span><br><span class="line">pip list</span><br><span class="line"><span class="comment">#验证版本</span></span><br><span class="line">python -V</span><br><span class="line"><span class="comment">#务必在这个新的2.7.10中安装</span></span><br><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br><span class="line"><span class="comment">#务必</span></span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br><span class="line"><span class="comment">#创建2.7.10的开发环境</span></span><br><span class="line">mkvirtualenv py2dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建完某版本的开发环境后务必退出，当前虚拟环境，不然就是虚拟环境中在创建了。</span></span><br><span class="line">deactivate</span><br><span class="line"><span class="comment">#退出2.7.10环境</span></span><br><span class="line">pyenv <span class="built_in">local</span> --<span class="built_in">unset</span> 2.7.10</span><br><span class="line"><span class="built_in">source</span> .zshrc</span><br></pre></td></tr></table></figure>

<p>python 3.x 虚拟环境创建类似 2.x</p>
]]></content>
      <categories>
        <category>python</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>01-sphinx : basic demo</title>
    <url>/2019/11/06/01-sphinx-basic/</url>
    <content><![CDATA[<h1 id="Install-sphinx-and-sphinx-rtd-theme"><a href="#Install-sphinx-and-sphinx-rtd-theme" class="headerlink" title="Install sphinx and sphinx-rtd-theme"></a>Install <strong>sphinx</strong> and <strong>sphinx-rtd-theme</strong></h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">workon py3dev </span><br><span class="line"></span><br><span class="line">pip install sphinx</span><br><span class="line">pip install sphinx-rtd-theme</span><br><span class="line"></span><br><span class="line">pip list</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="Init-a-project-with-sphinx"><a href="#Init-a-project-with-sphinx" class="headerlink" title="Init a project with sphinx."></a>Init a project with sphinx.</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir sphinx_demo</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> sphinx_demo</span><br><span class="line">sphinx-quickstart</span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose seprate source and builder, for other configuration, choose whatever you want.</span></span><br><span class="line"></span><br><span class="line">mkdir src</span><br><span class="line"></span><br><span class="line">tree -L 1</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── Makefile	<span class="comment"># build script for Unix.</span></span><br><span class="line">├── build 		<span class="comment"># sphinx docs build result.</span></span><br><span class="line">├── make.bat	<span class="comment"># build script for windows os.</span></span><br><span class="line">├── <span class="built_in">source</span>		<span class="comment"># source folder for sphinx docs.</span></span><br><span class="line">└── src 		<span class="comment"># user defined folder for python modules and scripts.</span></span><br></pre></td></tr></table></figure>

<h1 id="Config-sphinx"><a href="#Config-sphinx" class="headerlink" title="Config sphinx."></a>Config sphinx.</h1><p>Edit <strong>source/conf.py</strong></p>
<h2 id="Set-python-source-folder"><a href="#Set-python-source-folder" class="headerlink" title="Set python source folder."></a>Set python source folder.</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add those lines.</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.path.insert(<span class="number">0</span>, os.path.abspath(<span class="string">'../src/'</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Enable-autodoc-plugins"><a href="#Enable-autodoc-plugins" class="headerlink" title="Enable autodoc plugins."></a>Enable autodoc plugins.</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">extensions = [</span><br><span class="line">    <span class="string">'sphinx.ext.autodoc'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Enable-read-the-doc-theme"><a href="#Enable-read-the-doc-theme" class="headerlink" title="Enable read-the-doc theme."></a>Enable read-the-doc theme.</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html_theme = <span class="string">'sphinx_rtd_theme'</span></span><br></pre></td></tr></table></figure>

<h1 id="Build-sphinx-docs"><a href="#Build-sphinx-docs" class="headerlink" title="Build sphinx docs."></a>Build sphinx docs.</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make html 	<span class="comment"># build the docs by html builder.</span></span><br><span class="line"></span><br><span class="line">open build/html/index.html</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
        <category>sphinx</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sphinx</tag>
      </tags>
  </entry>
  <entry>
    <title>pydoc-basic-command</title>
    <url>/2019/11/05/pydoc-basic-command/</url>
    <content><![CDATA[<p>This is a post</p>
<p>Pydoc can be used to access the doc for python modules or classes easily. We will show the basic command for the pydoc.</p>
<a id="more"></a>

<ol>
<li><p><strong>Show help for pydoc</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pydoc -h</span><br><span class="line"></span><br><span class="line">pydoc - the Python documentation tool</span><br><span class="line"></span><br><span class="line">pydoc &lt;name&gt; ...</span><br><span class="line">    Show text documentation on something.  &lt;name&gt; may be the name of a</span><br><span class="line">    Python keyword, topic, <span class="keyword">function</span>, module, or package, or a dotted</span><br><span class="line">    reference to a class or <span class="keyword">function</span> within a module or module <span class="keyword">in</span> a</span><br><span class="line">    package.  If &lt;name&gt; contains a <span class="string">'/'</span>, it is used as the path to a</span><br><span class="line">    Python <span class="built_in">source</span> file to document. If name is <span class="string">'keywords'</span>, <span class="string">'topics'</span>,</span><br><span class="line">    or <span class="string">'modules'</span>, a listing of these things is displayed.</span><br><span class="line"></span><br><span class="line">pydoc -k &lt;keyword&gt;</span><br><span class="line">    Search <span class="keyword">for</span> a keyword <span class="keyword">in</span> the synopsis lines of all available modules.</span><br><span class="line"></span><br><span class="line">pydoc -p &lt;port&gt;</span><br><span class="line">    Start an HTTP server on the given port on the <span class="built_in">local</span> machine.  Port</span><br><span class="line">    number 0 can be used to get an arbitrary unused port.</span><br><span class="line"></span><br><span class="line">pydoc -g</span><br><span class="line">    Pop up a graphical interface <span class="keyword">for</span> finding and serving documentation.</span><br><span class="line"></span><br><span class="line">pydoc -w &lt;name&gt; ...</span><br><span class="line">    Write out the HTML documentation <span class="keyword">for</span> a module to a file <span class="keyword">in</span> the current</span><br><span class="line">    directory.  If &lt;name&gt; contains a <span class="string">'/'</span>, it is treated as a filename; <span class="keyword">if</span></span><br><span class="line">    it names a directory, documentation is written <span class="keyword">for</span> all the contents.</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Show document for a python module.</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pydoc pow</span><br><span class="line"></span><br><span class="line">Help on built-in <span class="keyword">function</span> pow <span class="keyword">in</span> module __builtin__:</span><br><span class="line"></span><br><span class="line">pow(...)</span><br><span class="line">    pow(x, y[, z]) -&gt; number</span><br><span class="line"></span><br><span class="line">    With two arguments, equivalent to x**y.  With three arguments,</span><br><span class="line">    equivalent to (x**y) % z, but may be more efficient (e.g. <span class="keyword">for</span> longs).</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Search python modules with specific keyword</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Find python modules which name contains "json"</span></span><br><span class="line">python -m pydoc -k json</span><br><span class="line"></span><br><span class="line">json - JSON (JavaScript Object Notation) &lt;http://json.org&gt; is a subset of</span><br><span class="line">json.decoder - Implementation of JSONDecoder</span><br><span class="line">json.encoder - Implementation of JSONEncoder</span><br><span class="line">json.scanner - JSON token scanner</span><br><span class="line">json.tests</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Start an HTTP server for pydoc on the given port</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pydoc -p 4000</span><br><span class="line"><span class="comment"># Open the browser and visit "http://localhost:4000" to view the documents for all your local python modules.</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="5">
<li><p><strong>Start an HTTP server for pydoc on a free port</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pydoc -g</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Write out the HTML documentation for a module</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m pydoc -w json</span><br><span class="line"><span class="comment"># We will get json.html in current folder.</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>python</category>
        <category>pydoc</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pydoc</tag>
      </tags>
  </entry>
  <entry>
    <title>01-Deploy hexo blog to githubPage</title>
    <url>/2019/10/31/Deploy-hexo-blog-to-githubPage/</url>
    <content><![CDATA[<ol>
<li>Install hexo-deployer-git.<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo_project</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<ol start="2">
<li><p>Edit <strong>_config.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment">#https://github.com/DanielPei/danielpei.github.io</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">[branch]</span> <span class="comment"># master</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">[message]</span> <span class="comment"># leave this blank</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Deploy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>Ref:</strong></p>
<ol>
<li><a href="https://hexo.io/docs/one-command-deployment" target="_blank" rel="noopener">Hexo one-command-deploy</a></li>
</ol>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
